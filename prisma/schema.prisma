generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model UserEducationalPath {
  id                Int             @id @default(autoincrement())
  userId            Int
  educationalPathId Int
  createdAt         DateTime        @default(now()) @db.Timestamp(6)
  updatedAt         DateTime        @updatedAt @db.Timestamp(6)
  state             Int             @default(0)
  roleId            Int?            @default(0)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  educationalPath   EducationalPath @relation(fields: [educationalPathId], references: [id], onDelete: Cascade)
  role              Role?           @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, educationalPathId], map: "UserEducationalPath_userId_educationalPathId_unique")
  @@index([userId])
  @@index([educationalPathId])
  @@index([roleId])
}

model PromoCode {
  id             Int       @id @default(autoincrement())
  code           String
  discount       Int
  description    String?
  expirationDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Course {
  id                    Int                     @id @default(autoincrement())
  title                 String
  description           String?
  imageId               String?
  categoryId            Int?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  authorId              Int
  mode                  Int                     @default(0)
  state                 Int                     @default(0)
  author                User                    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  price                 CoursePrice?
  category              Category?               @relation(fields: [categoryId], references: [id])
  modules               Module[]
  userCourses           UserCourse[]
  EducationalPathCourse EducationalPathCourse[]

  @@index([categoryId])
  @@index([authorId])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
}

model User {
  id                      Int                       @id @default(autoincrement())
  providerId              String                    @unique
  email                   String                    @unique
  firstName               String?
  lastName                String?
  displayName             String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  roleId                  Int                       @default(0)
  userCourses             UserCourse[]
  userModules             UserModule[]
  role                    Role?                     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  stripeCustomers         StripeCustomer[]
  Course                  Course[]
  EducationalPathPurchase EducationalPathPurchase[]
  userEducationalPaths    UserEducationalPath[]

  @@index([roleId])
}

model Role {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  users               User[]
  UserCourse          UserCourse[]
  UserEducationalPath UserEducationalPath[]
}

model Module {
  id            Int             @id @default(autoincrement())
  position      Int
  courseId      Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  title         String
  state         Int             @default(0)
  course        Course?         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userModules   UserModule[]
  ModuleContent ModuleContent[]

  @@index([courseId])
}

model ModuleContent {
  id        Int      @id @default(autoincrement())
  guid      String   @unique @default(uuid())
  data      Json
  createdAt DateTime @default(now())
  moduleId  Int?     @unique
  module    Module?  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
}

model UserCourse {
  id        Int                 @id @default(autoincrement())
  userId    Int
  courseId  Int
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  state     Int                 @default(0)
  roleId    Int?                @default(0)
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  role      Role?               @relation(fields: [roleId], references: [id], onDelete: Cascade)
  purchase  UserCoursePurchase? @relation("UserCoursePurchaseToUserCourse")

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([roleId])
}

model UserModule {
  id         Int      @id @default(autoincrement())
  userId     Int
  moduleId   Int
  isOpen     Boolean  @default(false)
  isFinished Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  module     Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@index([userId])
  @@index([moduleId])
}

model Attachment {
  id        Int      @id @default(autoincrement())
  guid      String   @unique @default(uuid())
  filename  String
  fileData  Bytes
  createdAt DateTime @default(now())
}

model Wishlist {
  id      Int     @id @default(autoincrement())
  name    String?
  contact String?
}

model StripeCustomer {
  id               Int      @id @default(autoincrement())
  stripeCustomerId String   @unique
  userId           Int      @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserCoursePurchase {
  id           Int        @id @default(autoincrement())
  userCourseId Int        @unique
  paymentId    String?
  purchaseDate DateTime   @default(now())
  userCourse   UserCourse @relation("UserCoursePurchaseToUserCourse", fields: [userCourseId], references: [id])
}

model CoursePrice {
  id              Int            @id @default(autoincrement())
  amount          Decimal        @default(0) @db.Decimal(10, 2)
  currency        String         @default("PLN")
  isRecurring     Boolean        @default(false)
  interval        PriceInterval?
  courseId        Int            @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
  trialPeriodDays Int?
  trialPeriodEnd  DateTime?      @db.Timestamp(6)
  trialPeriodType String?        @db.VarChar(255)
  course          Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model EducationalPath {
  id                   Int                       @id @default(autoincrement())
  title                String                    @db.VarChar(255)
  description          String?
  createdAt            DateTime                  @default(now()) @db.Timestamp(6)
  updatedAt            DateTime                  @default(now()) @updatedAt @db.Timestamp(6)
  authorId             Int?
  imageId              String?                   @db.VarChar(255)
  state                Int                       @default(0)
  mode                 Int                       @default(0)
  categoryId           Int?
  courses              EducationalPathCourse[]
  purchases            EducationalPathPurchase[]
  userEducationalPaths UserEducationalPath[]

  @@index([authorId])
}

model EducationalPathCourse {
  id                Int             @id @default(autoincrement())
  educationalPathId Int
  courseId          Int
  position          Int
  educationalPath   EducationalPath @relation(fields: [educationalPathId], references: [id], onDelete: Cascade)
  course            Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([educationalPathId, courseId], map: "EducationalPathCourse_unique")
  @@index([educationalPathId])
  @@index([courseId])
}

model EducationalPathPurchase {
  id                Int             @id @default(autoincrement())
  userId            Int
  educationalPathId Int
  purchaseDate      DateTime        @default(now()) @db.Timestamp(6)
  paymentId         String?         @db.VarChar(255)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  educationalPath   EducationalPath @relation(fields: [educationalPathId], references: [id], onDelete: Cascade)

  @@unique([userId, educationalPathId], map: "EducationalPathPurchase_unique")
  @@index([userId])
  @@index([educationalPathId])
}

model EducationalPathPrice {
  id                Int       @id @default(autoincrement())
  amount            Decimal   @default(0) @db.Decimal(10, 2)
  currency          String    @default("PLN") @db.VarChar(10)
  isRecurring       Boolean   @default(false)
  interval          String?   @db.VarChar(10)
  educationalPathId Int       @unique
  createdAt         DateTime  @default(now()) @db.Timestamp(6)
  updatedAt         DateTime  @default(now()) @db.Timestamp(6)
  trialPeriodDays   Int?
  trialPeriodEnd    DateTime? @db.Timestamp(6)
  trialPeriodType   String?   @db.VarChar(10)
}

model CoursePromoCode {
  id          Int @id @default(autoincrement())
  courseId    Int
  promoCodeId Int

  @@unique([courseId, promoCodeId], map: "CoursePromoCode_unique")
}

model EducationalPathPromoCode {
  id                Int @id @default(autoincrement())
  educationalPathId Int
  promoCodeId       Int

  @@unique([educationalPathId, promoCodeId], map: "EducationalPathPromoCode_unique")
}

enum PriceInterval {
  ONE_TIME
  MONTH
  YEAR
}
