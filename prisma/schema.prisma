// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id Int @id @default(autoincrement())
  authorId Int 
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  title String @db.Text
  price     Decimal @default(0) @db.Decimal(10,2)
  description String? @db.Text
  imageId String?
  mode Int @default(0) // private, public, open
  state Int @default(0) // draft, published, archived
  categoryId Int?
  category Category? @relation(fields: [categoryId], references: [id])
  modules Module[]
  userCourses UserCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([authorId])
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique
  courses Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id Int @id @default(autoincrement())
  providerId String @unique
  email String @unique
  firstName String?
  lastName String?
  displayName String?
  userCourses UserCourse[]
  userModules UserModule[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId Int @default(0)
  role Role? @relation(fields: [roleId], references: [id], onDelete: Cascade)
  stripeCustomers StripeCustomer[]
  @@index([roleId])
  Course Course[]
}

model Role {
  id Int @id @default(autoincrement())
  name String @unique
  users User[]

  UserCourse UserCourse[]
}
model Module {
  id Int @id @default(autoincrement())
  title String @db.Text
  position Int
  courseId Int?
  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userModules UserModule[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseId])
  ModuleContent ModuleContent[]
}

model ModuleContent {
  id         Int      @id @default(autoincrement())
  guid String @default(uuid()) @unique
  data       Json     @db.JsonB
  createdAt  DateTime @default(now())
  moduleId   Int? @unique
  module     Module?  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  @@index([moduleId])
}

model UserCourse {
  id Int @id @default(autoincrement())
  userId Int
  courseId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state Int @default(0)
  roleId Int? @default(0)
  role Role? @relation(fields: [roleId], references: [id], onDelete: Cascade)

  purchase UserCoursePurchase? @relation("UserCoursePurchaseToUserCourse")

  @@index([userId])
  @@index([courseId])

  @@unique([userId, courseId])
  @@index([roleId])
}

model UserModule {
id Int @id @default(autoincrement())
  userId Int
  moduleId Int
  isOpen Boolean @default(false)
  isFinished Boolean @default(false)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([moduleId])

  @@unique([userId, moduleId])
}

model Attachment {
  id         Int      @id @default(autoincrement())
  guid String @default(uuid()) @unique
  filename   String
  fileData   Bytes  @db.ByteA 
  createdAt  DateTime @default(now())
}

model Wishlist {
  id Int @id @default(autoincrement())
  name String? 
  contact String?
}

model StripeCustomer {
  id                Int    @id @default(autoincrement())
  stripeCustomerId  String @unique
  userId            Int    @unique
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model UserCoursePurchase {
  id            Int        @id @default(autoincrement())
  userCourseId  Int        @unique
  userCourse    UserCourse @relation("UserCoursePurchaseToUserCourse", fields: [userCourseId], references: [id])
  paymentId     String?    // e.g. Stripe payment intent/session id
  purchaseDate DateTime @default(now())
}