// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id Int @id @default(autoincrement())
  userId String
  title String @db.Text
  description String? @db.Text
  imageId String?

  categoryId Int?
  category Category? @relation(fields: [categoryId], references: [id])
  modules Module[]
  userCourses UserCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique
  courses Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id Int @id @default(autoincrement())
  providerId String @unique
  email String @unique
  firstName String?
  lastName String?
  displayName String?
  userCourses UserCourse[]
  userModules UserModule[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId Int @default(0)
  role Role? @relation(fields: [roleId], references: [id], onDelete: Cascade)
  @@index([roleId])
}

model Role {
  id Int @id @default(autoincrement())
  name String @unique
  users User[]
}
model Module {
  id Int @id @default(autoincrement())
  moduleContentId String @unique @default(uuid())
  title String @db.Text
  position Int
  courseId Int?
  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userModules UserModule[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseId])

}

model UserCourse {
  id Int @id @default(autoincrement())
  userId Int
  courseId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state Int @default(0)
  @@index([userId])
  @@index([courseId])

  @@unique([userId, courseId])
}

model UserModule {
id Int @id @default(autoincrement())
  userId Int
  moduleId Int
  isOpen Boolean @default(false)
  isFinished Boolean @default(false)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([moduleId])

  @@unique([userId, moduleId])
}